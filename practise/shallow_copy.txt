#include<iostream>
using namespace std;
#include<string>
#include<cstring>


class Venky{
    private:
        char* name;
        
    public:
        Venky(const char* name_p){
            name = new char[strlen(name_p) + 1];
            strcpy(name, name_p);
        }
        
        //shallow copy
        Venky(const Venky& other){
            name = other.name;
        }
        
        // // deep copy
        // Venky(const Venky& other){
            
        //     name = new char[strlen(other.name) + 1];
        //     strcpy(name, other.name);
        // }
        
        void display(){
            cout << "The name is : " << name << endl;
        }
};
int main(){
    
    Venky ob1("quest");
    Venky ob2 = ob1;
    
    ob1.display();
    ob2.display();
}



----------------------------------------------------


#include <iostream>
#include <cstring>
using namespace std;

class DynamicClass {
private:
    int* size;        // Dynamic size field
    int* arr;         // Pointer to dynamically allocated array
    string* name;     // Pointer to a dynamically allocated string
    char* description; // Pointer to a dynamically allocated char array (new field)

public:
    // Constructor
    DynamicClass(int size_p, int arr_p[], string name_p, const char* desc_p) {
        size = new int(size_p);            // Dynamically allocate size
        arr = new int[*size];              // Dynamically allocate array
        name = new string(name_p);         // Dynamically allocate string
        description = new char[strlen(desc_p) + 1]; // Dynamically allocate char array for description
        strcpy(description, desc_p);       // Copy the description string into the allocated memory

        // Initialize the array
        for (int i = 0; i < *size; i++) {
            arr[i] = arr_p[i];
        }
    }

    // Shallow Copy Constructor
    DynamicClass(const DynamicClass& other) {
        // Copy only the pointers (shallow copy)
        size = other.size;
        arr = other.arr;
        name = other.name;
        description = other.description;
    }

    // Member function to display the data
    void display() const {
        cout << "Name: " << *name << endl;
        cout << "Description: " << description << endl; // Display the description
        cout << "Size: " << *size << endl;
        cout << "Array Contents: ";
        for (int i = 0; i < *size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    // Destructor
    ~DynamicClass() {
        // If shallow copy is in use, freeing shared memory will cause issues
        cout << "Destructor called for object with Name: " << *name << endl;
        delete size;       // Free dynamically allocated size
        delete[] arr;      // Free dynamically allocated array
        delete name;       // Free dynamically allocated string
        delete[] description; // Free dynamically allocated char array for description
    }
};

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    string stringName;
    cout << "Enter the string (name): ";
    cin >> stringName;

    char description[100];
    cout << "Enter the description: ";
    cin.ignore(); // To ignore the newline character left by the previous input
    cin.getline(description, 100);

    // Create an array for testing
    int* vec = new int[n];
    cout << "Enter " << n << " elements for the array: ";
    for (int i = 0; i < n; i++) {
        cin >> vec[i];
    }

    // Create an object of the class
    DynamicClass obj1(n, vec, stringName, description);

    // Create another object using the shallow copy constructor
    DynamicClass obj2 = obj1;

    // Display both objects
    cout << "\nObject 1:" << endl;
    obj1.display();
    cout << "\nObject 2 (Shallow Copy):" << endl;
    obj2.display();

    // Clean up dynamically allocated memory for test array
    delete[] vec;

    return 0;
}
