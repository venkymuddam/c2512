single inheritance with dynamic binding
=============================================================
one two dynamic/static objects of the Derived class 
pointed by base class pointer
and call all behaviours using Base class pointer 

Override Base Class behaviors to derived class.
Define constructors and destructors for all the classes 
Define all the fields as dynamic fields in each class 


// code

#include <iostream>
#include <cstring>
using namespace std;


class Vehicle {
    
    private:
        char* make;
        char* model;

    public:

        Vehicle(const char* vehicleMake, const char* vehicleModel) {
            make = new char[strlen(vehicleMake) + 1];
            strcpy(make, vehicleMake);

            model = new char[strlen(vehicleModel) + 1];
            strcpy(model, vehicleModel);
        }

        virtual ~Vehicle() {
            delete[] make;
            delete[] model;
        }

        virtual void start() const = 0;
        virtual void stop() const = 0;
};

class ElectricCar : public Vehicle {

    private:
        char* batteryType;


    public:

        ElectricCar(const char* carMake, const char* carModel, const char* carBatteryType)
            : Vehicle(carMake, carModel) {
            batteryType = new char[strlen(carBatteryType) + 1];
            strcpy(batteryType, carBatteryType);
        }


        ~ElectricCar() override {
            delete[] batteryType;
        }

        void start() const override {
            cout << "Starting ElectricCar: " << make << " " << model
                    << " with battery type: " << batteryType << endl;
        }

        void stop() const override {
            cout << "Stopping ElectricCar: " << make << " " << model << endl;
        }
};

int main() {
    Vehicle* car1 = new ElectricCar("tesla", "model S", "lithium battery");
    Vehicle* car2 = new ElectricCar("maruti suzuki", "model x", "Nickel battery");

    car1->start();
    car1->stop();
    car2->start();
    car2->stop();

    delete car1;
    delete car2;
    return 0;
}
