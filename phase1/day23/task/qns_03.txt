single inheritance with dynamic binding
=============================================================
one two dynamic/static objects of the Derived class 
pointed by base class pointer
and call all behaviours using Base class pointer 

Override Base Class behaviors to derived class.
Define constructors and destructors for all the classes 
Define all the fields as dynamic fields in each class 


// code
#include <iostream>
#include <string>
using namespace std;


class Vehicle {
    private:
        string make;
        string model;

    public:
        Vehicle(const string& p_make, const string& p_model) : make(p_make), model(p_model) {
            cout << "Vehicle constructor called. Make: " << make << ", Model: " << model << endl;
        }

        virtual ~Vehicle() {
            cout << "Vehicle destructor called." << endl;
        }

        virtual void start() const = 0; 
        virtual void stop() const = 0; 
};


class ElectricCar : public Vehicle {
    private:
        int batteryLevel; 

    public:
        ElectricCar(const string& p_make, const string& p_model, int p_batteryLevel)
            : Vehicle(p_make, p_model), batteryLevel(p_batteryLevel) {
            cout << "ElectricCar constructor called. Battery Level: " << batteryLevel << "%" << endl;
        }

        ~ElectricCar() {
            cout << "ElectricCar destructor called." << endl;
        }

        void start() override {
            cout << "ElectricCar is starting. Battery Level: " << batteryLevel << "%" << endl;
        }

        void stop() override {
            cout << "ElectricCar is stopping." << endl;
        }
};

int main() {
    
    ElectricCar ob1("Tesla", "Model S", 90);
    Vehicle* ob2 = &ob1; 
    ob2->start();
    ob2->stop();


    Vehicle* ob3 = new ElectricCar("Nissan", "Leaf", 80);
    ob3->start();
    ob3->stop();
    delete ob3;


    return 0;
}
