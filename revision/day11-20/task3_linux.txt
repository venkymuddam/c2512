
			--------------------// problem number 08.--------------------

Problem Statement:

You are tasked with creating a C++ program 
that performs the following operations:

1. `Input & Store`:  
   - Take an array of 10 integers from the user.
   
2. `Functions`:  
   - Create a function `find_max` 
   that returns the maximum value from the array.
   - Create a function `find_min` 
   that returns the minimum value from the array.
   - Create a function `average` 
   that returns the average of the array elements.

3. `Branching Statements`:  
   - In the `main` function, use an `if` condition to check 
   if the average is greater than 50. 
   If so, display "The average is greater than 50". 
   Otherwise, display "The average is less than or equal to 50".

4. `Loops`:  
   - Use a `for` loop to iterate through the array and 
   calculate the sum of its elements.

5. `Output`:  
   - Print the array, the maximum value, 
   the minimum value, and the average.

// code
#include<iostream>
#include<climits>
using std::cout;
using std::cin;
using std::endl;
const int MAX_SIZE = 3;


int findMaximumNumber(int arr[])
{
        int maximumNumber = INT_MIN;
        for (int i = 0; i < MAX_SIZE; i++)
        {
                if (arr[i] > maximumNumber)
                {
                        maximumNumber = arr[i];
                }
        }
        return maximumNumber;

}


int findMinimumNumber(int arr[])
{
        int minimumNumber = INT_MAX;
        for (int i = 0; i < MAX_SIZE; i++)
        {
                if (arr[i] < minimumNumber)
                {
                        minimumNumber = arr[i];
                }
        }
        return minimumNumber;

}


int findAverageNumber(int arr[])
{
        float averageNumber = 0;
        int sum = 0;
        for (int i = 0; i < MAX_SIZE; i++)
        {
                sum += arr[i];
        }
        averageNumber = (float)((sum/MAX_SIZE));
        return averageNumber;

}

int isAverageGreaterThan50(int avgNum)
{
        if (avgNum > 50)
        {
                return true;
        }
        return false;
}

int findSumOfElements(int arr[])
{
        int sum=0;
        for (int i=0; i<MAX_SIZE; i++)
        {
                sum += arr[i];
        }
        return sum;
}



void Test(void)
{
        int arr[MAX_SIZE] = {};
        int maxi = 0, mini = 0, avg = 0;
        for (int i =0; i < MAX_SIZE; i++)
        {
                cout << "Enter the " << i + 1 << "th number into array : ";
                cin >> arr[i]; 
        }

        for (int i = 0; i < MAX_SIZE; i++)
        {
                cout << arr[i] << endl;
        }
	maxi = findMaximumNumber(arr);
        cout << "The maximum number is : " << maxi << endl;
        mini = findMinimumNumber(arr);
        cout << "The minimum number is : " << mini << endl;
        int avgValue = findAverageNumber(arr);
        cout << "The average number is : " << avgValue << endl;
	int isGreaterThan50 = isAverageGreaterThan50(avgValue);
        if (isGreaterThan50 == true)
        {
                cout << "avg is greater than 50" << endl;
        }
        else 
        {
                cout << "Avg is not greater than 50 " << endl;
        }
        int sumOfElements = findSumOfElements(arr);
        cout << "The sum of all numbers is " << sumOfElements << endl;

}

int main() 
{
        Test();

        return EXIT_SUCCESS;
}


			        ---------------------// problem number 03--------------------


`Tasks`:

1. Create a new directory called `my_cpp_project` for your C++ programs.
    $ mkdir my_cpp_project
2. Change into the `my_cpp_project` directory.
    $ cd my_cpp_project
3. Create a C++ file named `greet.cpp` 
in the `my_cpp_project` directory.
        $ touch greet.cpp
4. Write a C++ program inside `greet.cpp` 
that asks the user for their name and prints a greeting message.
    $ vim greet.cpp
5. Compile the `greet.cpp` program into an executable.
    $ g++ -o App.out greet.cpp
6. Run the compiled executable and ensure 
that it prompts for the user’s name and displays the greeting.
    $ ./App.out
7. Use a Linux command to display the contents of `greet.cpp`.
    $ cat -n greet.cpp
8. Modify the `greet.cpp` file 
to add a simple farewell message and save the changes.
    $ vim greet.cpp
9. Compile and run the modified program 
to ensure it works as expected.
    $ g++ -o App.out greet.cpp [compile]
    $ ./App.out                [run]
10. Remove the `greet.cpp` file once you're done.
    $ rm greet.cpp
11. Check the contents of the `my_cpp_project` directory, and 
remove the directory if it’s empty.
    $ rmdir my_cpp_project  [if it is empty]
    $ rm -r my_cpp_project  [even if it is not-empty]


//code
#include<iostream>
#include<cstdlib>
using std::cout;
using std::cin;
using std::endl;

int main()
{
        char name[255];

        cout << "Enter your name : ";
        cin >> name;

        cout << "Hello, " << name << " welcome to vim editor." << endl;

        cout << "Hello, " << name << "Bye... Bye..see you soon!! " << endl;

        return EXIT_SUCCESS;

}
