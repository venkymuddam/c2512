from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json
import logging

# Import the functions from the rag_ollama.py file
from rag_ollama import store_data_in_rag, generate_response_from_rag_and_ollama

# Initialize FastAPI app
app = FastAPI()

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Define the request body models
class MessageRequest(BaseModel):
    message: str  # Request model for storing user message

class QueryRequest(BaseModel):
    query: str  # Request model for sending query to RAG + Ollama

# Endpoint to store user message in RAG
@app.post("/store_message/")
async def store_message(request: MessageRequest):
    try:
        # Call the function from rag_ollama.py to store the data in RAG
        response = store_data_in_rag(request.message)
        return json.loads(response)  # Return success message from RAG storage
    except Exception as e:
        logger.error(f"Error storing message: {e}")
        raise HTTPException(status_code=500, detail="Error storing message in RAG")

# Endpoint to handle user query
@app.post("/query_response/")
async def query_response(request: QueryRequest):
    try:
        # Call the function from rag_ollama.py to generate a response
        response = generate_response_from_rag_and_ollama(request.query)
        return json.loads(response)  # Return the generated response from RAG + Ollama
    except Exception as e:
        logger.error(f"Error generating response: {e}")
        raise HTTPException(status_code=500, detail="Error generating response from RAG + Ollama")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)  # Run FastAPI app
