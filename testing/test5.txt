
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json 
import logging

from rag_ollama import store_data_in_rag, generate_response_from_rag_and_ollama  # store_data_in_vector_db,  

app = FastAPI()

logging.basicConfig(level=logging.INFO)
logger=logging.getLogger(__name__)

class MessageRequest(BaseModel):
    message: str
class QueryRequest(BaseModel):
    query: str 


@app.post("/store_message/") 
async def store_message(request: MessageRequest):
    try:
        response = store_data_in_rag(request.message) 
        # return json.loads(response) 
        return response
    except Exception as e:
        logger.error(f"error storing message: {e}")
        raise HTTPException(status_code=500, detail="Error storing message in RAG")
    
    
@app.get("/query_response/") 
async def query_response(request: QueryRequest):
    try:
        response = generate_response_from_rag_and_ollama(request.query)
        # return json.loads(response)
        return response
    except Exception as e:
        logger.error(f"error generating response: {e}")
        raise HTTPException(status_code=500, detail="error generating response from RAG + Ollama")
    
    
    
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
    
